/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonymousReportPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllCategories"
      | "getCategoryCount"
      | "getCategoryStatistics"
      | "getReport"
      | "reportCount"
      | "reports"
      | "submitReport"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ReportSubmitted"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReport",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReport",
    data: BytesLike
  ): Result;
}

export namespace ReportSubmittedEvent {
  export type InputTuple = [
    id: BigNumberish,
    title: string,
    category: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    title: string,
    category: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: bigint;
    title: string;
    category: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonymousReportPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): AnonymousReportPlatform;
  waitForDeployment(): Promise<this>;

  interface: AnonymousReportPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllCategories: TypedContractMethod<[], [string[]], "view">;

  getCategoryCount: TypedContractMethod<[_category: string], [bigint], "view">;

  getCategoryStatistics: TypedContractMethod<
    [],
    [[string[], bigint[]]],
    "view"
  >;

  getReport: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        title: string;
        content: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  reportCount: TypedContractMethod<[], [bigint], "view">;

  reports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        title: string;
        content: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  submitReport: TypedContractMethod<
    [_title: string, _content: string, _category: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllCategories"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCategoryCount"
  ): TypedContractMethod<[_category: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCategoryStatistics"
  ): TypedContractMethod<[], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getReport"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        title: string;
        content: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reportCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        title: string;
        content: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitReport"
  ): TypedContractMethod<
    [_title: string, _content: string, _category: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ReportSubmitted"
  ): TypedContractEvent<
    ReportSubmittedEvent.InputTuple,
    ReportSubmittedEvent.OutputTuple,
    ReportSubmittedEvent.OutputObject
  >;

  filters: {
    "ReportSubmitted(uint256,string,string,uint256)": TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;
    ReportSubmitted: TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;
  };
}
