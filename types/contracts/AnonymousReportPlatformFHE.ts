/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonymousReportPlatformFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decryptCategoryCount"
      | "decryptReport"
      | "decryptedReports"
      | "encryptedReports"
      | "getDecryptedReport"
      | "getEncryptedCategoryCount"
      | "protocolId"
      | "reportCount"
      | "requestCategoryCountDecryption"
      | "requestReportDecryption"
      | "submitEncryptedReport"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "ReportDecrypted"
      | "ReportSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decryptCategoryCount",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptReport",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptedReports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedReports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedCategoryCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCategoryCountDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReportDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedReport",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decryptCategoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptedReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedCategoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCategoryCountDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReportDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedReport",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportDecryptedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportSubmittedEvent {
  export type InputTuple = [id: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [id: bigint, timestamp: bigint];
  export interface OutputObject {
    id: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonymousReportPlatformFHE extends BaseContract {
  connect(runner?: ContractRunner | null): AnonymousReportPlatformFHE;
  waitForDeployment(): Promise<this>;

  interface: AnonymousReportPlatformFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decryptCategoryCount: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decryptReport: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decryptedReports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        title: string;
        content: string;
        category: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  encryptedReports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedTitle: string;
        encryptedContent: string;
        encryptedCategory: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getDecryptedReport: TypedContractMethod<
    [reportId: BigNumberish],
    [
      [string, string, string, boolean] & {
        title: string;
        content: string;
        category: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  getEncryptedCategoryCount: TypedContractMethod<
    [category: string],
    [string],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  reportCount: TypedContractMethod<[], [bigint], "view">;

  requestCategoryCountDecryption: TypedContractMethod<
    [category: string],
    [void],
    "nonpayable"
  >;

  requestReportDecryption: TypedContractMethod<
    [reportId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitEncryptedReport: TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedContent: BytesLike,
      encryptedCategory: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decryptCategoryCount"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptReport"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptedReports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        title: string;
        content: string;
        category: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "encryptedReports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedTitle: string;
        encryptedContent: string;
        encryptedCategory: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDecryptedReport"
  ): TypedContractMethod<
    [reportId: BigNumberish],
    [
      [string, string, string, boolean] & {
        title: string;
        content: string;
        category: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedCategoryCount"
  ): TypedContractMethod<[category: string], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reportCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestCategoryCountDecryption"
  ): TypedContractMethod<[category: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestReportDecryption"
  ): TypedContractMethod<[reportId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedReport"
  ): TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedContent: BytesLike,
      encryptedCategory: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ReportDecrypted"
  ): TypedContractEvent<
    ReportDecryptedEvent.InputTuple,
    ReportDecryptedEvent.OutputTuple,
    ReportDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "ReportSubmitted"
  ): TypedContractEvent<
    ReportSubmittedEvent.InputTuple,
    ReportSubmittedEvent.OutputTuple,
    ReportSubmittedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "ReportDecrypted(uint256)": TypedContractEvent<
      ReportDecryptedEvent.InputTuple,
      ReportDecryptedEvent.OutputTuple,
      ReportDecryptedEvent.OutputObject
    >;
    ReportDecrypted: TypedContractEvent<
      ReportDecryptedEvent.InputTuple,
      ReportDecryptedEvent.OutputTuple,
      ReportDecryptedEvent.OutputObject
    >;

    "ReportSubmitted(uint256,uint256)": TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;
    ReportSubmitted: TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;
  };
}
